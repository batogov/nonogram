{"version":3,"sources":["src/game.ts","src/view.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.1dc12391.js","sourceRoot":"..","sourcesContent":["import { BasicView, Field, Picture, Mode } from './types';\n\nconst generateEmptyField: (rows: number, cols: number) => Field = (rows, cols) => {\n    return new Array(rows).fill(0).map(() => new Array(cols).fill('empty'));\n}\n\nexport const getSequences: (array: number[]) => number[] = (array) => {\n    const result: number[] = [];\n\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] === 1) {\n            if (i === 0) {\n                result.push(1);\n            } else {\n                if (array[i - 1] === 1) {\n                    result[result.length - 1] = result[result.length - 1] + 1;\n                } else {\n                    result.push(1);\n                }\n            }\n        }\n    }\n\n    return result.length === 0 ? [0] : result;\n}\n\nexport const getAllHorizontalSequences: (picture: Picture) => Array<number[]> = (picture) => {\n    const sequences = [];\n\n    for (let i = 0; i < picture.length; i++) {\n        sequences.push(getSequences(picture[i]));\n    }\n\n    return sequences;\n}\n\nexport const getAllVerticalSequences: (picture: Picture) => Array<number[]> = (picture) => {\n    const sequences = [];\n\n    for (let j = 0; j < picture[0].length; j++) {\n        const column = picture.map(row => row[j]);\n\n        sequences.push(getSequences(column));\n    }\n\n    return sequences;\n}\n\nexport class Game {\n    private picture: Picture;\n    private view: BasicView;\n\n    private field: Field;\n\n    private mode: Mode = 'coloring';\n    private lifeCounter: number = 3;\n\n    private verticalSequences: Array<number[]>;\n    private horizontalSequences: Array<number[]>;\n\n    constructor(\n        picture: Picture,\n        view: BasicView,\n    ) {\n        this.picture = picture;\n        this.view = view;\n\n        this.field = generateEmptyField(picture.length, picture[0].length);\n\n        this.verticalSequences = getAllVerticalSequences(picture);\n        this.horizontalSequences = getAllHorizontalSequences(picture);\n    }\n\n    private render() {\n        this.view.render({\n            field: this.field,\n            lifeCounter: this.lifeCounter,\n            horizontalSequences: this.horizontalSequences,\n            verticalSequences: this.verticalSequences\n        });\n    }\n\n    private handleNewGameButtonClick() {\n        this.lifeCounter = 3;\n        this.field = generateEmptyField(this.picture.length, this.picture[0].length);\n\n        this.view.renderEndGame(false);\n        this.init();\n    }\n\n    private handleCellClick(i: number, j: number) {\n        if (this.field[i][j] !== 'empty' || this.lifeCounter === 0) {\n            return;\n        }\n\n        if (this.mode === 'coloring') {\n            if (this.picture[i][j] === 1) {\n                this.field[i][j] = 'colored';\n            } else {\n                this.field[i][j] = 'crossed';\n                this.lifeCounter -= 1;\n            }\n        }\n\n        if (this.mode === 'crossing') {\n            if (this.picture[i][j] !== 1) {\n                this.field[i][j] = 'crossed';\n            } else {\n                this.field[i][j] = 'colored';\n                this.lifeCounter -= 1;\n            }\n        }\n\n        if (this.lifeCounter === 0) {\n            this.view.renderEndGame(true);\n        }\n\n        this.render();\n    }\n\n    private handleModeChange(mode: Mode) {\n        this.mode = mode;\n    }\n\n    public init() {\n        this.view.initHandlers({\n            handleCellClick: (i, j) => this.handleCellClick(i, j),\n            handleModeChange: (mode) => this.handleModeChange(mode),\n            handleNewGameButtonClick: () => this.handleNewGameButtonClick(),\n        });\n\n        this.render();\n    }\n}","import { BasicView, Field, Mode } from './types';\n\nexport class View implements BasicView {\n    private element: Element | null = null;\n    private form: Element | null = null;\n    private lifeCounterElement: Element | null = null;\n    private endGameElement: Element | null = null;\n\n    constructor(\n        element: Element | null,\n        form: Element | null,\n        lifeCounterElement: Element | null,\n        endGameElement: Element | null,\n    ) {\n        this.element = element;\n        this.form = form;\n        this.lifeCounterElement = lifeCounterElement;\n        this.endGameElement = endGameElement;\n    }\n\n    getAllVerticalSequencesElement(verticalSequences: Array<number[]>) {\n        const fragment = document.createDocumentFragment();\n\n        for (let i = 0; i < verticalSequences.length; i++) {\n            const element = document.createElement('div');\n            element.classList.add('vertical-seqs');\n\n            for (let j = 0; j < verticalSequences[i].length; j++) {\n                const item = document.createElement('span');\n\n                item.classList.add('vertical-seqs__item');\n                item.textContent = String(verticalSequences[i][j]);\n\n                element.appendChild(item);\n            }\n\n            fragment.appendChild(element);\n        }\n\n        return fragment;\n    }\n\n    getHorizontalSequencesElement(i: number, horizontalSequences: Array<number[]>) {\n        const element = document.createElement('div');\n        element.classList.add('horizontal-seqs');\n\n        for (let j = 0; j < horizontalSequences[i].length; j++) {\n            const item = document.createElement('span');\n\n            item.classList.add('horizontal-seqs__item');\n            item.textContent = String(horizontalSequences[i][j]);\n\n            element.appendChild(item);\n        }\n\n        return element;\n    }\n\n    public renderEndGame(isEndGameShown: boolean) {\n        if (this.endGameElement) {\n            if (isEndGameShown) {\n                this.endGameElement.classList.remove('end-game_hidden');\n            } else {\n                this.endGameElement.classList.add('end-game_hidden');\n            }\n        }\n    }\n\n    public render({\n        field,\n        horizontalSequences,\n        verticalSequences,\n        lifeCounter,\n    }: {\n        field: Field,\n        horizontalSequences: Array<number[]>,\n        verticalSequences: Array<number[]>,\n        lifeCounter: number,\n    }) {\n        if (this.lifeCounterElement) {\n            this.lifeCounterElement.textContent = `Lives: ${lifeCounter}`;\n        }\n\n        if (this.element) {\n            this.element.innerHTML = '';\n\n            // Render corner cell\n            const cornerCell = document.createElement('div');\n            cornerCell.classList.add('corner-cell');\n            this.element.appendChild(cornerCell);\n\n            // Render vertical sequences row\n            this.element.appendChild(this.getAllVerticalSequencesElement(verticalSequences));\n\n            for (let i = 0; i < field.length; i++) {\n                // Render horizontal sequences cell\n                this.element.appendChild(this.getHorizontalSequencesElement(i, horizontalSequences));\n\n                for (let j = 0; j < field[0].length; j++) {\n                    const cell = document.createElement('div');\n\n                    cell.classList.add('cell');\n\n                    if (field[i][j] === 'colored') {\n                        cell.classList.add('cell_colored');\n                    }\n\n                    if (field[i][j] === 'crossed') {\n                        cell.classList.add('cell_crossed');\n                    }\n\n                    cell.dataset.i = String(i);\n                    cell.dataset.j = String(j);\n\n                    this.element.appendChild(cell);\n                }\n            }\n        }\n    }\n\n    public initHandlers({\n        handleCellClick,\n        handleModeChange,\n        handleNewGameButtonClick,\n    }: {\n        handleCellClick: (i: number, j: number) => void,\n        handleModeChange: (mode: Mode) => void,\n        handleNewGameButtonClick: () => void,\n    }) {\n        if (this.element) {\n            this.element.addEventListener('click', (event: Event) => {\n                if (\n                    !(\n                        event.target instanceof HTMLDivElement &&\n                        event.target.classList.contains('cell')\n                    )\n                ) {\n                    return;\n                }\n\n                const i = Number(event.target.dataset.i);\n                const j = Number(event.target.dataset.j);\n\n                handleCellClick(i, j);\n            });\n        }\n\n        if (this.form) {\n            this.form.addEventListener('change', (event: Event) => {\n                if (!(event.target instanceof HTMLInputElement)) {\n                    return;\n                }\n\n                if (event.target.value === 'coloring') {\n                    handleModeChange('coloring');\n                }\n\n                if (event.target.value === 'crossing') {\n                    handleModeChange('crossing');\n                }\n            });\n        }\n\n        if (this.endGameElement) {\n            const newGameButton = this.endGameElement.querySelector('button');\n\n            if (newGameButton) {\n                newGameButton.addEventListener('click', () => {\n                    handleNewGameButtonClick();\n                });\n            }\n        }\n    }\n}","import { Game } from './game';\nimport { View } from './view';\n\nconst element = document.querySelector('#field');\nconst formElement = document.querySelector('#form');\nconst lifeCounterElement = document.querySelector('#life-counter');\nconst endGameElement = document.querySelector('#end-game');\n\nconst picture = [\n    [0, 1, 1, 0, 0],\n    [0, 1, 0, 1, 0],\n    [1, 1, 1, 1, 1],\n    [1, 1, 1, 0, 1],\n    [0, 1, 1, 0, 0],\n];\n\nconst view = new View(element, formElement, lifeCounterElement, endGameElement);\nconst game = new Game(picture, view);\n\ngame.init();"]}