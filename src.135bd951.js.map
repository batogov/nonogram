{"version":3,"sources":["src/game.ts","src/view.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.135bd951.js","sourceRoot":"..","sourcesContent":["import { BasicView, Field, State, Picture, Mode, Data } from './types';\n\nconst generateEmptyState: (rows: number, cols: number) => State = (rows, cols) => {\n    return new Array(rows).fill(0).map(() => new Array(cols).fill('empty'));\n}\n\nexport const getSequences: (array: number[]) => number[] = (array) => {\n    const result: number[] = [];\n\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] === 1) {\n            if (i === 0) {\n                result.push(1);\n            } else {\n                if (array[i - 1] === 1) {\n                    result[result.length - 1] = result[result.length - 1] + 1;\n                } else {\n                    result.push(1);\n                }\n            }\n        }\n    }\n\n    return result.length === 0 ? [0] : result;\n}\n\nexport const getAllHorizontalSequences: (field: Field) => Array<number[]> = (field) => {\n    const sequences = [];\n\n    for (let i = 0; i < field.length; i++) {\n        sequences.push(getSequences(field[i]));\n    }\n\n    return sequences;\n}\n\nexport const getAllVerticalSequences: (field: Field) => Array<number[]> = (field) => {\n    const sequences = [];\n\n    for (let j = 0; j < field[0].length; j++) {\n        const column = field.map(row => row[j]);\n\n        sequences.push(getSequences(column));\n    }\n\n    return sequences;\n}\n\nexport class Game {\n    private level: number;\n    private data: Data;\n\n    private state: State;\n    private field: Field;\n    private picture: Picture;\n\n    private view: BasicView;\n\n    private mode: Mode = 'coloring';\n    private lifeCounter: number = 3;\n\n    private verticalSequences: Array<number[]>;\n    private horizontalSequences: Array<number[]>;\n\n    constructor(\n        data: Data,\n        view: BasicView,\n    ) {\n        this.data = data;\n        this.level = 0;\n\n        this.setLevel(0, data);\n\n        this.view = view;\n    }\n\n    private setLevel(level: number, data: Data) {\n        const picture = data[level].picture;\n        const field = data[level].field;\n\n        this.field = field;\n        this.picture = picture;\n        this.state = generateEmptyState(field.length, field[0].length);\n\n        this.verticalSequences = getAllVerticalSequences(field);\n        this.horizontalSequences = getAllHorizontalSequences(field);\n    }\n\n    private render() {\n        this.view.render({\n            state: this.state,\n            lifeCounter: this.lifeCounter,\n            horizontalSequences: this.horizontalSequences,\n            verticalSequences: this.verticalSequences\n        });\n    }\n\n    private renderPicture() {\n        this.view.renderPicture({\n            picture: this.picture,\n            state: this.state,\n            lifeCounter: this.lifeCounter,\n            horizontalSequences: this.horizontalSequences,\n            verticalSequences: this.verticalSequences\n        })\n    }\n\n    private handleNewGameButtonClick() {\n        this.lifeCounter = 3;\n        this.state = generateEmptyState(this.field.length, this.field[0].length);\n\n        this.view.renderEndGame(false);\n        this.init();\n    }\n\n    private handleNextLevelButtonClick() {\n        if (this.level + 1 < this.data.length) {\n            this.level++;\n            this.setLevel(this.level, this.data);\n\n            this.view.renderVictoryView(false);\n            this.render();\n        }\n    }\n\n    private checkWin() {\n        for (let i = 0; i < this.field.length; i++) {\n            for (let j = 0; j < this.field[0].length; j++) {\n                if (this.field[i][j] === 1 && this.state[i][j] !== 'colored') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private handleCellClick(i: number, j: number) {\n        if (this.state[i][j] !== 'empty' || this.lifeCounter === 0) {\n            return;\n        }\n\n        if (this.mode === 'coloring') {\n            if (this.field[i][j] === 1) {\n                this.state[i][j] = 'colored';\n            } else {\n                this.state[i][j] = 'crossed';\n                this.lifeCounter -= 1;\n            }\n        }\n\n        if (this.mode === 'crossing') {\n            if (this.field[i][j] !== 1) {\n                this.state[i][j] = 'crossed';\n            } else {\n                this.state[i][j] = 'colored';\n                this.lifeCounter -= 1;\n            }\n        }\n\n        if (this.lifeCounter === 0) {\n            this.view.renderEndGame(true);\n        }\n\n        if (this.checkWin()) {\n            this.view.renderVictoryView(true, this.picture);\n            this.renderPicture();\n        } else {\n            this.render();\n        }\n    }\n\n    private handleModeChange(mode: Mode) {\n        this.mode = mode;\n    }\n\n    public init() {\n        this.view.initHandlers({\n            handleCellClick: (i, j) => this.handleCellClick(i, j),\n            handleModeChange: (mode) => this.handleModeChange(mode),\n            handleNewGameButtonClick: () => this.handleNewGameButtonClick(),\n            handleNextLevelButtonClick: () => this.handleNextLevelButtonClick(),\n        });\n\n        this.render();\n    }\n}","import { BasicView, State, Mode, Picture } from './types';\n\nexport class View implements BasicView {\n    private element: Element | null = null;\n    private buttonElement: Element | null = null;\n    private lifeCounterElement: Element | null = null;\n    private endGameElement: Element | null = null;\n    private victoryElement: Element | null = null;\n\n    constructor(\n        element: Element | null,\n        buttonElement: Element | null,\n        lifeCounterElement: Element | null,\n        endGameElement: Element | null,\n        victoryElement: Element | null,\n    ) {\n        this.element = element;\n        this.buttonElement = buttonElement;\n        this.lifeCounterElement = lifeCounterElement;\n        this.endGameElement = endGameElement;\n        this.victoryElement = victoryElement;\n    }\n\n    getAllVerticalSequencesElement(verticalSequences: Array<number[]>, state: State) {\n        const fragment = document.createDocumentFragment();\n\n        for (let i = 0; i < verticalSequences.length; i++) {\n            const element = document.createElement('div');\n            element.classList.add('vertical-seqs');\n\n            const sequencesSum = verticalSequences[i].reduce((sum, current) => sum + current, 0);\n            const coloredCellCount = state.reduce((sum, row) => row[i] === 'colored' ? sum + 1 : sum, 0);\n\n            if (sequencesSum === coloredCellCount) {\n                element.classList.add('vertical-seqs_done');\n            }\n\n            for (let j = 0; j < verticalSequences[i].length; j++) {\n                const item = document.createElement('span');\n\n                item.classList.add('vertical-seqs__item');\n                item.textContent = String(verticalSequences[i][j]);\n\n                element.appendChild(item);\n            }\n\n            fragment.appendChild(element);\n        }\n\n        return fragment;\n    }\n\n    getHorizontalSequencesElement(i: number, horizontalSequences: Array<number[]>, state: State) {\n        const element = document.createElement('div');\n        element.classList.add('horizontal-seqs');\n\n        const sequencesSum = horizontalSequences[i].reduce((sum, current) => sum + current, 0);\n        const coloredCellCount = state[i].reduce((sum, current) => current === 'colored' ? sum + 1 : sum, 0);\n\n        if (sequencesSum === coloredCellCount) {\n            element.classList.add('horizontal-seqs_done');\n        }\n\n        for (let j = 0; j < horizontalSequences[i].length; j++) {\n            const item = document.createElement('span');\n\n            item.classList.add('horizontal-seqs__item');\n            item.textContent = String(horizontalSequences[i][j]);\n\n            element.appendChild(item);\n        }\n\n        return element;\n    }\n\n    getCornerCell() {\n        const cornerCell = document.createElement('div');\n        cornerCell.classList.add('corner-cell');\n\n        return cornerCell;\n    }\n\n    public renderEndGame(isEndGameShown: boolean) {\n        if (this.endGameElement) {\n            if (isEndGameShown) {\n                this.endGameElement.classList.remove('end-game_hidden');\n            } else {\n                this.endGameElement.classList.add('end-game_hidden');\n            }\n        }\n    }\n\n    public renderVictoryView(isVictoryViewShown: boolean, picture?: Picture) {\n        if (this.victoryElement) {\n            if (isVictoryViewShown && picture) {\n                this.victoryElement.classList.remove('victory_hidden');\n\n                const pictureElement = this.victoryElement.querySelector('#victory-picture');\n\n                if (pictureElement) {\n                    pictureElement.innerHTML = '';\n                    pictureElement.appendChild(this.getPictureElement({ picture }));\n                }\n            } else {\n                this.victoryElement.classList.add('victory_hidden');\n            }\n        }\n    }\n\n    private getPictureElement({\n        picture,\n        sequencesParams,\n    }: {\n        picture: Picture,\n        sequencesParams?: {\n            state: State,\n            horizontalSequences: Array<number[]>,\n            verticalSequences: Array<number[]>,\n        }\n    }) {\n        const fragment = document.createDocumentFragment();\n\n        if (sequencesParams) {\n            fragment.appendChild(this.getCornerCell());\n            fragment.appendChild(this.getAllVerticalSequencesElement(sequencesParams.verticalSequences, sequencesParams.state));\n        }\n\n        for (let i = 0; i < picture.length; i++) {\n            if (sequencesParams) {\n                fragment.appendChild(this.getHorizontalSequencesElement(i, sequencesParams.horizontalSequences, sequencesParams.state));\n            }\n\n            for (let j = 0; j < picture[0].length; j++) {\n                const cell = document.createElement('div');\n                cell.classList.add('cell');\n                cell.style.backgroundColor = picture[i][j];\n\n                fragment.appendChild(cell);\n            }\n        }\n\n        return fragment;\n    }\n\n    public renderPicture({\n        picture,\n        state,\n        horizontalSequences,\n        verticalSequences,\n    }: {\n        picture: Picture,\n        state: State,\n        horizontalSequences: Array<number[]>,\n        verticalSequences: Array<number[]>,\n    }) {\n        if (this.element) {\n            this.element.innerHTML = '';\n            this.element.appendChild(this.getPictureElement({ picture, sequencesParams: { state, horizontalSequences, verticalSequences } }))\n        }\n    }\n\n    public render({\n        state,\n        horizontalSequences,\n        verticalSequences,\n        lifeCounter,\n    }: {\n        state: State,\n        horizontalSequences: Array<number[]>,\n        verticalSequences: Array<number[]>,\n        lifeCounter: number,\n    }) {\n        if (this.lifeCounterElement) {\n            const items = Array.prototype.slice.call(this.lifeCounterElement.querySelectorAll('.life-counter__item'));\n\n\n            for (let i = 0; i < items.length; i++) {\n                if (!(items[i] instanceof HTMLSpanElement)) {\n                    continue;\n                }\n\n                if (i < lifeCounter) {\n                    items[i].classList.add('life-counter__item_filled');\n                } else {\n                    items[i].classList.remove('life-counter__item_filled');\n                }\n            }\n        }\n\n        if (this.element) {\n            this.element.innerHTML = '';\n\n            this.element.appendChild(this.getCornerCell());\n\n            // Render vertical sequences row\n            this.element.appendChild(this.getAllVerticalSequencesElement(verticalSequences, state));\n\n            for (let i = 0; i < state.length; i++) {\n                // Render horizontal sequences cell\n                this.element.appendChild(this.getHorizontalSequencesElement(i, horizontalSequences, state));\n\n                for (let j = 0; j < state[0].length; j++) {\n                    const cell = document.createElement('div');\n                    cell.classList.add('cell');\n\n                    if (state[i][j] === 'colored') {\n                        cell.classList.add('cell_colored');\n                    }\n\n                    if (state[i][j] === 'crossed') {\n                        cell.classList.add('cell_crossed');\n                    }\n\n                    cell.dataset.i = String(i);\n                    cell.dataset.j = String(j);\n\n                    this.element.appendChild(cell);\n                }\n            }\n        }\n    }\n\n    public initHandlers({\n        handleCellClick,\n        handleModeChange,\n        handleNewGameButtonClick,\n        handleNextLevelButtonClick,\n    }: {\n        handleCellClick: (i: number, j: number) => void,\n        handleModeChange: (mode: Mode) => void,\n        handleNewGameButtonClick: () => void,\n        handleNextLevelButtonClick: () => void,\n    }) {\n        if (this.element) {\n            this.element.addEventListener('click', (event: Event) => {\n                if (\n                    !(\n                        event.target instanceof HTMLDivElement &&\n                        event.target.classList.contains('cell')\n                    )\n                ) {\n                    return;\n                }\n\n                const i = Number(event.target.dataset.i);\n                const j = Number(event.target.dataset.j);\n\n                handleCellClick(i, j);\n            });\n        }\n\n        if (this.buttonElement) {\n\n            const cross = this.buttonElement.querySelector('#cross');\n            const square = this.buttonElement.querySelector('#square');\n\n            this.buttonElement.addEventListener('click', (event: Event) => {\n                if (!(event.currentTarget instanceof HTMLButtonElement)) {\n                    return;\n                }\n\n                if (event.currentTarget.getAttribute('aria-checked') === 'true') {\n                    handleModeChange('crossing');\n                    event.currentTarget.setAttribute('aria-checked', 'false');\n\n                    if (cross && square) {\n                        cross.classList.add('mode-button__item_active');\n                        square.classList.remove('mode-button__item_active');\n                    }\n                } else {\n                    handleModeChange('coloring');\n                    event.currentTarget.setAttribute('aria-checked', 'true');\n\n                    if (cross && square) {\n                        square.classList.add('mode-button__item_active');\n                        cross.classList.remove('mode-button__item_active');\n                    }\n                }\n            });\n        }\n\n        if (this.endGameElement) {\n            const newGameButton = this.endGameElement.querySelector('button');\n\n            if (newGameButton) {\n                newGameButton.addEventListener('click', () => {\n                    handleNewGameButtonClick();\n                });\n            }\n        }\n\n        if (this.victoryElement) {\n            const nextLevelButton = this.victoryElement.querySelector('button');\n\n            if (nextLevelButton) {\n                nextLevelButton.addEventListener('click', () => {\n                    handleNextLevelButtonClick();\n                })\n            }\n        }\n    }\n}","import { Game } from './game';\nimport { View } from './view';\nimport { Data } from './types';\n\nconst element = document.querySelector('#field');\nconst modeButtonElement = document.querySelector('#mode-button');\nconst lifeCounterElement = document.querySelector('#life-counter');\nconst endGameElement = document.querySelector('#end-game');\nconst victoryElement = document.querySelector('#victory')\n\nconst data = [\n    {\n        title: 'lion',\n        picture: [\n            ['#23A6FF', '#774218', '#774218', '#774218', '#23A6FF'],\n            ['#F6B853', '#F6B853', '#F6B853', '#774218', '#23A6FF'],\n            ['#F1B348', '#F1B348', '#F1B348', '#774218', '#23A6FF'],\n            ['#23A6FF', '#633714', '#633714', '#774218', '#EEAF46'],\n            ['#EEAF46', '#633714', '#EEAF46', '#EEAF46', '#F6B853'],\n        ],\n        field: [\n            [0, 1, 1, 1, 0],\n            [1, 1, 1, 1, 0],\n            [1, 1, 1, 1, 0],\n            [0, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n        ],\n    },\n    {\n        title: 'rose',\n        picture: [\n            ['#9B001E', '#B90628', '#B90628', '#B90628', '#9B001E'],\n            ['#9B001E', '#B90628', '#AD0B2A', '#CA0028', '#9B001E'],\n            ['#9B001E', '#CA0028', '#CA0028', '#CA0028', '#9B001E'],\n            ['#DF1FFE', '#9B001E', '#9B001E', '#9B001E', '#DF1FFE'],\n            ['#DF1FFE', '#DF1FFE', '#77E916', '#DF1FFE', '#DF1FFE'],\n        ],\n        field: [\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [0, 1, 1, 1, 0],\n            [0, 0, 1, 0, 0],\n        ],\n    }\n] as Data;\n\nconst view = new View(element, modeButtonElement, lifeCounterElement, endGameElement, victoryElement);\nconst game = new Game(data, view);\n\ngame.init();"]}